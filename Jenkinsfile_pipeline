// jenkins pipeline MSPR 2 
pipeline {
    agent any 
    environment {
        XDEBUG_MODE  = 'coverage'
    }
    stages {
        stage('Install') { 
            steps {
                // installation de toutes les dépendances de l'environnement 
		    sh 'ls -la'
		
		sh 'git checkout env_clean'
		sh 'git pull origin env_clean'
		
		sh 'ls -la'
		
                echo 'install apache2'
                //sh 'sudo apt install -y apache2'

                echo 'install php'
                //sh 'sudo apt-get install -y php7.3'

                echo 'install symfony'
                //sh 'sudo wget https://get.symfony.com/cli/installer -O - | bash'
                
                echo 'install phpunit'
		        //sh 'php composer.phar require phpunit/phpunit'
				
				echo 'install Symfony PHP CodeSniffer'
				//sh 'sudo php composer.phar require squizlabs/php_codesniffer'
				
				echo 'install php xdebug code coverage'
				//sh 'sudo apt install php-xdebug -y'
				
				echo 'install ansible'
				//sh 'sudo apt-get -y install ansible'
            }
        }
        stage('Verification') { 
            steps {
                // vérification des dépendances
                
                echo 'apahe2 status'
				sh 'systemctl status apache2'
				
				echo 'php version'
				sh 'php -v'
				
				echo 'symfony version'
				sh '/var/lib/jenkins/.symfony/bin/symfony -V'

                echo 'phpunit version'
                sh 'php vendor/bin/phpunit --version'
				
				echo 'check php codesniffer coding standards'
				sh 'vendor/bin/phpcs -i'
				
				echo 'check xdebug code coverage'
				// sh 'php -ini | grep \'xdebug support\''
				
				echo 'check ansible'
				sh 'sudo ansible all -m ping -u vagrant'
            }
        }
        stage('Clone') { 
            steps {
                // git clone du dépôt de développement
                
                echo 'git clone'
				sh 'git clone https://github.com/RPSM2/MSPR2.git'
				dir('MSPR2/'){
					sh 'ls -la'
				}
            }
        }
        stage('Tests') { 
            steps {
                // Exécution des tests (fonctionnels, non régression, intégration, performances) + test de couverture et normes de dev (PSR-2 & Symfony)

                dir('MSPR2/'){
					echo 'changement de branche'
					sh 'git checkout simpleTest'
					
				}
				
				echo 'launch test and coverage'
				sh 'php vendor/bin/phpunit MSPR2/tests/AppTest.php --coverage-xml report_pipeline/  --whitelist MSPR2/src/'

				echo 'script python check coverage test'
				sh 'python check_coverage.py'
				
				echo 'launch coding standards'
				sh 'vendor/bin/phpcs --report-summary=report_pipeline/report_coding_standards.txt --ignore=*MSPR2/var/*,*MSPR2/bin/*,*MSPR2/vendor/* MSPR2/'
				
				echo 'check coding standards'
				sh 'python check_normes_dev.py'
            }
        }
        stage('Deploy') { 
            steps {
                // package application pour déploiement : Ansible
				
				echo 'deploy app ansible'
				sh 'sudo ansible-playbook ansible_playbook.yml'
				
				echo 'suppression projet'
				sh 'rm -rf MSPR2'

            }
        }
    }
}
