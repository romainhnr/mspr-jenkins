// jenkins pipeline MSPR 2 
pipeline {
    agent any 
    stages {
        stage('Install') { 
            steps {
                // installation de toutes les dépendances de l'environnement 

                echo 'install apache2'
                sh 'sudo apt install -y apache2'

                echo 'install php'
                sh 'sudo apt-get install php -y'

                echo 'install composer'
                sh 'sudo php -r "copy(\'https://getcomposer.org/installer\', \'composer-setup.php\');"'
                sh 'sudo php -r "if (hash_file(\'sha384\', \'composer-setup.php\') === \'756890a4488ce9024fc62c56153228907f1545c228516cbf63f885e036d37e9a59d27d63f46af1d4d07ee0f76181c7d3\') { echo \'Installer verified\'; } else { echo \'Installer corrupt\'; unlink(\'composer-setup.php\'); } echo PHP_EOL;"'
                sh 'sudo php composer-setup.php'
                sh 'sudo php -r "unlink(\'composer-setup.php\');"'
                
                echo 'install symfony'
                sh 'sudo wget https://get.symfony.com/cli/installer -O - | bash'
                
                echo 'install phpunit'
		        sh 'php composer.phar require phpunit/phpunit'
				
				echo 'install Symfony PHP CodeSniffer'
				sh 'php composer.phar require --dev escapestudios/symfony2-coding-standard:3.x-dev'
				sh 'vendor/bin/phpcs --config-set installed_paths vendor/escapestudios/symfony2-coding-standard'
				
				echo 'install php xdebug code coverage'
				sh 'sudo apt install php-xdebug -y'
				
				echo 'install ansible'
				sh 'sudo apt-get -y install ansible'
            }
        }
        stage('Verification') { 
            steps {
                // vérification des dépendances
                
                echo 'apahe2 status'
				sh 'systemctl status apache2'
				
				echo 'php version'
				sh 'php -v'
				
				echo 'check composer'
				sh 'ls -la composer.phar'
				
				echo 'symfony version'
				sh '/var/lib/jenkins/.symfony/bin/symfony -V'

                echo 'phpunit version'
                sh 'php vendor/phpunit/phpunit/phpunit --version'
				
				echo 'check php codesniffer coding standards'
				sh 'vendor/bin/phpcs -i'
				
				echo 'check xdebug code coverage'
				sh 'php -ini | grep \'xdebug support\''
				
				echo 'check ansible'
				sh 'ansible all -m ping -u vargant'
            }
        }
        stage('Clone') { 
            steps {
                // git clone du dépôt de développement
                
                echo 'git clone'
				sh 'git clone https://github.com/RPSM2/MSPR2.git'
				dir('MSPR2/'){
					sh 'ls -la'
				}
            }
        }
        stage('Tests') { 
            steps {
                // exécution des tests (fonctionnels, non régression, intégration, performances -> Alix) / test de couverture et normes de dev (PSR-2)

                dir('MSPR2/'){
					echo 'changement de branche'
					sh 'git checkout dev_test'
				}

				echo 'launch test and coverage'
				sh 'php vendor/phpunit/phpunit/phpunit MSPR2/tests/ --coverage-xml report_pipeline/  --whitelist MSPR2/src/'
				
				echo 'script python check coverage test'
				sh 'python check_coverage.py'
				
				echo 'launch coding standards'
				sh 'vendor/bin/phpcs --report-summary=report_coding_standards.txt MSPR2/'
				
				echo 'check coding standards'
				sh 'python check_normes_dev.py'
            }
        }
        stage('Package') { 
            steps {
                // package application pour déploiement : Capistrano (aka CR7), ansible, php deployer, zip de zouave
                
                echo 'build app'
				// sh '/var/lib/jenkins/.symfony/bin/symfony server:start'
				// sh '/var/lib/jenkins/.symfony/bin/symfony server:stop'
				
				echo 'deploy app ansible'
				sh 'sudo ansible-playbook ansible_playbook.yml'
				
				echo 'suppression projet'
				sh 'rm -rf MSPR2'

            }
        }
    }
}
